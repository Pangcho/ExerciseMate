#!/usr/bin/env node

/**
 * Module dependencies.
 */

// const app = require('../app');
// const debug = require('debug')('server:server');
// const http = require('http');
// const {Server} = require("socket.io");
// const cors = require('cors')
// let corsOptions = {
//     origin: [
//         'http://localhost:3000',
//         'https://pose2team.vercel.app'
//     ],
//     credentials: true
// }
// app.use(cors(corsOptions))
//

/**
 * Get port from environment and store in Express.
 */

// const port = normalizePort(process.env.PORT || '3001');
// app.set('port', port);
// console.log(process.env.PORT)

/**
 * Create HTTP server.
 */

// const server = http.createServer(app);

// const io = new Server(server, {
//     path: '/chat',
// });
// io.on('connection', (socket) => {
//     console.log(`user connected ${socket.id}`);
//
//     // 클라이언트로부터의 메시지 수신 및 브로드캐스팅
//     socket.on('chat message', (msg) => {
//         io.emit('chat message', msg); // 모든 클라이언트에게 메시지 전송
//         console.log(msg)
//     });
//
//     // 연결 해제 시 처리
//     socket.on('disconnect', () => {
//         console.log('A user disconnected from the chat');
//     });
// });
/**
 * Listen on provided port, on all network interfaces.
 */
//
// server.listen(port);
// server.on('error', onError);
// server.on('listening', onListening);
// server.on('listening', function () {
//         console.log('Express server listening on port ' + port);
//     }
// )

/**
 * Normalize a port into a number, string, or false.
 */

// function normalizePort(val) {
//     const port = parseInt(val, 10);
//
//     if (isNaN(port)) {
//         // named pipe
//         return val;
//     }
//
//     if (port >= 0) {
//         // port number
//         return port;
//     }
//
//     return false;
// }
//
// /**
//  * Event listener for HTTP server "error" event.
//  */
//
// function onError(error) {
//     if (error.syscall !== 'listen') {
//         throw error;
//     }
//
//     const bind = typeof port === 'string'
//         ? 'Pipe ' + port
//         : 'Port ' + port;
//
//     // handle specific listen errors with friendly messages
//     switch (error.code) {
//         case 'EACCES':
//             console.error(bind + ' requires elevated privileges');
//             process.exit(1);
//             break;
//         case 'EADDRINUSE':
//             console.error(bind + ' is already in use');
//             process.exit(1);
//             break;
//         default:
//             throw error;
//     }
// }
//
// /**
//  * Event listener for HTTP server "listening" event.
//  */
//
// function onListening() {
//     const addr = server.address();
//     const bind = typeof addr === 'string'
//         ? 'pipe ' + addr
//         : 'port ' + addr.port;
//         : 'port ' + addr.port;
//     debug('Listening on ' + bind);
// }
